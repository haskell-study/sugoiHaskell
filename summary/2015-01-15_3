3. 関数の構文
この章ではHaskellの関数を書くための構文を見ていく。
値を手軽に分解する方法、大きなif/elseの連鎖を避ける方法、計算の中間データを一時的に保存/活用する方法を見ていく。

3.1 パターンマッチ
パターンマッチはある種のデータが従うべきパターンを指定し、そのパターンに従ってデータを分解するために使う。
例えば渡された数が7かどうか調べたい。

lucky :: Int -> String
lucky 7 = "LUCKY NUMBER SEVEN!"
lucky x = "Sorry, you're out of luck, pal!"

luckyを呼ぶとパターンが上から下に試される。パターンに合致した場合のみ本文が実行される。
つまり、7を渡された時のみ"LU~"が返される。
パターン部分に具体値でなく小文字から始まる名前を書くと任意の値に合致するようになる。
↓のパターンは与えられた値に常に合致し、その値をパターンに使った名前で参照できるようになる。
勿論同じ関数をif/then/elseを使って実装することもできる。
階乗を再帰的に定義することも出来る。
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)
再帰は重要なので第四章でもう一度見ていく。
パターンが網羅的でないとnon-exhaustive patternsエラーとなる。
最後に全てに合致するパターンを入れておくとプログラムのクラッシュを防げて安全。

・タプルのパターンマッチ
2つの2次元空間のベクトル(ペア)を受け取り、足し合わせる関数を書きたい。
パターンマッチを知らなければ
addVectors :: (Double,Double)->(Double,Double)->(Double,Double)
addVectors a b =(fst a + fst b, snd a + snd b)
パターンマッチ使うと
addVectors :: (Double,Double)->(Double,Double)->(Double,Double)
addVectors (x1,y1) (x2,y2)=(x1 + x2, y1 + y2)
こちらのほうが引数がタプルであることが明示されているのでわかりやすい。また網羅的。
また3次元空間のベクトルでfst,sndに対応する関数が欲しいとき
first :: (a,b,c) -> a
first (x, _, _) = x
second :: (a,b,c) -> b
second (_, y, _) = x
first :: (a,b,c) -> c
first (_, _, z) = z
のようにすればよい。(_は予約語なので、通常の変数としては使えない)

・リストのパターンマッチとリスト内包表記
リスト内包表記のパターンマッチでは失敗したら次の要素に進み、失敗した要素は破棄される
ghci > let xs = [(1,3),(4,3),(2,4),(5,3),(5,6),(3,1)]
ghci > [(x*100)+3 | (x,3) <- xs]
[103,403,503]
空リストや:を含むものもパターンとして使える。
x:xsというパターンはリストの先頭要素をxに束縛し、残りをxsに束縛する。
リストの要素がちょうど1つのとき、xsには空のリストが束縛される。これは再帰関数でよく使われる。
head関数をhead'として実装してみよう。
head' :: [a] -> a
head' [] = error "Can't call head on an empty list, dummy!"
head' (x:_) = x
この定義にあるように、複数変数に束縛したいときは、片方が_であっても()で囲まなければシンタックスエラー。
error関数は文字列を引数に鳥、その文字列でランタイムエラーを生成する。
基本的にはプログラムをクラッシュさせるものなのでみだりに用いてはいけない。
パターン部分の(x:[])は[x],(x:y:[])は[x,y]と同じだが、(x:y:_)は[]では書けない。
[]で書けるのは要素数が指定されているものだけ。
パターン部分では++演算子をつかうことができない。

・asパターン
asパターンは、値をパターンに分解しつつ、パターンマッチの対象になった値自体も参照したいときに使う。
asパターンを作るには普通のパターン前に名前と@を追加する。
例えば
firstLetter :: String -> String
firstLetter "" = "Empty string, whoops!"
firstLetter all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]
ghci > firstLetter "apple"
"The first letter of apple is a"

3.2 場合分けして、きっちりガード！
パターンマッチでは引数の構造で場合分けした。
引数の値が満たす性質で場合分けしたいときはガードを用いる。
複数の条件があるときはif文よりガードのほうが可読性が高く、パターンマッチとの相性もよい。
BMIによって叱り方を変えるプログラム
bmiTell :: Double -> Double -> String
bmiTell weight height
    |weight / height^2 <= 18.5 = "a"
    |weight / height^2 <= 25.0 = "b"
    |weight / height^2 <= 30.0 = "c"
    |otherwise   = "d"
がーどにはパイプ文字(|)とそれに続く真理値式、さらに関数の本文が続く。
上から読むのはパターンマッチと同じ。
大抵の場合最後のガードはotherwiseになっている。
全てFalseに評価されてotherwiseも無かった場合、次のパターンに移る。適切なパターンがなければエラー。
`(バッククオート、shift+@)による中置記法は関数呼び出しだけでなく関数定義でも使える。

3.3 where?!
bmiTell weight height
    |bmi <= 18.5 = "a"
    |weight / height^2 <= 25.0 = "b"
    |weight / height^2 <= 30.0 = "c"
    |otherwise   = "d"
    where bmi = weight / height^2
のように定義を書き換えることができる。whereキーワードを使うと、この値を一回だけしか計算しなくて済む。
whereの後の変数や関数は複数でもよいが、インデントがずれているとエラーとなる。
whereの中で定義した変数はその関数内でしか使えないが、グローバルに使いたいときは外に出す必要がある。
whereの束縛の中でもパターンマッチを使うことができる。

3.4 let it be
let式の中でもパターンマッチを使うことが出来る。
cylinder :: Double -> Double -> Double
cylinder r h =
    let sideArea = 2 * pi * r * h
        topArea = pi * r ^ 2
    in  sideArea + 2 * topArea
let式は式なので値を持つが、where節は式でないので値を持たないという違いがある。
例えば
ghci > 4*(let a = 9 in a + 1) + 2
42
というようにも文中のどこでも使える。以下に便利な用法を書く。
ローカルスコープに関数を作れる。
ghci > [let square x = x * x in (square 5, square 3, suare 2)]
[(25,9,4)]
セミコロンで区切れる。
ghci > (let a = 100; b = 200; c = 300 in a*b*c,
        let foo="Hey "; bar = "there!" in foo ++ bar)
(600000,"Hey there!")
let式とパターンマッチでタプルを要素に分解して名前に束縛できる。
ghci > (let (a, b, c) = (1, 2, 3) in a+b+c) * 100
600
let式はリスト内包表記の中ｄえも使える。詳しくは後述。
let式は局所的なので、関数全体をスコープに取る変数を定義したければwhereの方が適当

・リスト内包表記でのlet
例えば体重と新著のペアのリストを計算する関数をwhereとletで書くと

calcBmis :: [(Double, Double)] -> [Double]
calcBmis xs = [bmi w h | (w, h) <- xs]
    where bmi weight height = weight / height ^ 2

calcBmis :: [(Double, double)] -> [Double]
calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2]

(w, h) <- xsの部分はジェネレータと呼ばれる。letよりも前に定義されているので、変数bmiはジェネレータから参照不可。

・GHCiでのlet
GHCiで直接関数や定数を定義するときはinを省略できる。このときこの定義はセッション全体から参照できる。
ghci > let zoot x y z = x * y + z
ghci > zoot 3 4 2
14
inを省略しなかった場合は参照できない。

3.5 case式
case式は変数の指定した値に対するコードブロックを評価できる。
ようするにどこでもパターンマッチできる。
head' :: [a] -> a
head' xs = case xs of [] -> error "No head for empty lines!"
                      (x:_) -> x
はhead関数と同じ働きをする。
引数によるパターンマッチが使えるのは関数を定義するときだけだが、case式はどこでも使える。例えば
describeList :: [a] -> String
describeList ls = "The list is "
                  ++ case ls of [] -> "empty."
                                [x] -> "a singleton list."
                                xs -> "a longer list." 

これをwhereを使って書くと
describeList :: [a] -> String
describeList ls = "The list is " ++ what ls
    where what [] = "empty."
          what [x] = "a singleton list."
          what xs = "a longer list."
となる。
