# 第13章 モナドがいっぱい
アプリカティブファンクターが強化されたファンクターであったように、モナドは強化されたアプリカティブファンクターである。  
この章ではモナドについて勉強しよう。

## 13.1 アプリカティブファンクターを強化する
あるデータ型を関数で映したときの挙動を指定するには、ファンクターでは`Functor`インスタンスを書き、`fmap`がそのデータ型を処理できるようにすれば良かった。また、最初から関数がファンクターに包まれているときは、`Applicative`型クラスを導入すればよかった。
```haskell
fmap :: (Functor f) => (a -> b) -> f a -> f b
(<$>) :: (Applicative f) => f (a -> b) -> f a -> f b
```
#### 以下では関数`f a`の代わりに`m a`と書く。
モナドは`a -> m b`型の関数を`m a`型の値に適応する関数である。
```haskell
(>>=) :: (Monad m) => m a -> (a -> m b) -> m b
```
ここで`>>=`は**バインド(bind)**と呼ばれる。モナドは`>>=`をサポートするアプリカティブファンクターである。モナドでは「特定の文脈を持つ値を関数に与えたときに何が返るのか、文脈は保たれるのか」ということが主眼となる。
## 13.2 `Maybe`から始めるモナド
`Maybe`がモナドであることを確認してみよう。`Maybe`型のバインドの実装は以下のようになっている。
```haskell
>>= :: Maybe a -> (a -> Maybe b) -> Maybe b
>>= Nothing f = Nothing
>>= (Just x) f = f x
```
```
ghci> Just 3 >>= \x -> Just (x*2)
Just 6
ghci> Nothing >>= \x -> Just (x*2)
Nothing
```
`a -> Maybe b`型の関数を`Maybe a`型の値に適応して、`Maybe b`型が返されていることが確認できる。
## 13.3 `Monad`型クラス
モナドの型クラスの実装は以下のようになっている。
```haskell
class Monad m where
  return :: a -> m a
  
  (>>=) :: m a -> (a -> m b) -> m b
  
  (>>) :: m a -> m b -> m b
  x >> y = x >>= \_ -> y
  
  fail :: String -> m a
  fail msg = erro msg
```
例として、`Maybe`型は以下のように`Monad`型クラスのインスタンスにできる。
```haskell
instance Monad Maybe where
	return x      = Just x
	Nothing >>= f = Nothing
	Just x >>= f  = f x
	fail _        = Nothing
```
## 13.4 綱渡り
詳細は教科書参照。ポールを持って綱渡りをしたいが、鳥がとまって邪魔をする。  
左右の鳥の数の差が4以上になると転落してしまう。
### ひたすらコーディング/うゎぁあああああ落ちるぅぅうううああああ/ロープ上のバナナ
```haskell
type Birds = Int
type Pole = (Birds, Birds)

landLeft :: Birds -> Pole -> Maybe Pole
landLeft n (left, right)
	| abs ((left + n) - right) < 4 = Just (left + n, right)
	| otherwise                    = Nothing

landRight :: Birds -> Pole -> Maybe Pole
landRight n (left, right)
	| abs (left - (n + right)) < 4 = Just (left, right + n)
	| otherwise                    = Nothing
	
banana :: Pole -> Maybe Pole
banana _ = Nothing
```
```
ghci> return (0, 0) >>= landLeft 1 >>= landLeft 2 >>= landRight 1
Just (3,1)

ghci> return (0, 0) >>= landLeft 1 >>= landRight 4 >>= landLeft (-1) >>= landRight (-2)
Nothing
-- 途中で左右の鳥の差が4になっているので転落、これをMaybe値が失敗した場合として表現できた。

ghci> return (0, 0) >>= landLeft 1 >>= banana >>= landLeft (-1) >>= landRight (-2)
Nothing
-- banana関数はNothingを返す、以降全ての結果はNothingになる。
```
これらのことは`Maybe`をアプリカティブ値として扱うだけでは出来ない。  
また入力に関係なく規定のモナド値を返す関数はモナド型クラスに標準で実装されている。
```haskell
(>>) :: (Monad m) => m a -> m b -> m b
m >> n = m >>= \_ -> n
```
```
ghci> ghci> return (0, 0) >>= landLeft 1 >> Nothing >>= landLeft (-1) >>= landRight (-2)
Nothing
```
`>>= banana`は`>> Nothing`と同じ関数となる。  
モナドを用いることで、処理が失敗するかもしれないコードをモナド適用の連鎖で表現することができるので、常に失敗の可能性が考慮されたコードを書けるのだ。
## 13.5 `do`記法/`do`自由自在
`do`記法は既に第8章で学んだ、複数のI/Oアクションを一つにくっつけるときに使う構文だった。  
`do`記法はI/Oモナドだけでなく全てのモナドに使うことが出来る構文。以下のふたつのコードは全く同じ実装となる。
```haskell
hoge :: Maybe String
hoge = Just 3   >>= (\x ->
       Just "!" >>= (\y ->
       Just (show x ++ y)))
```
```haskell
hoge :: Maybe String
hoge = do
     x <- Just 3
     y <- Just "!"
     Just (show x ++ y)
```
`do`式の最後のモナド値は`<-`で結果を束縛できない。
### 帰ってきたピエール
先ほどの綱渡りもdo記法を使えば以下のように書くことが出来る。
```haskell
routine :: Maybe String
routine = do
	start <- return (0, 0)
	first <- landLeft 2 start
	Nothing                 -- _ <- Nothingと同じこと。
	second <- landRight 2 first
	landLeft 1 second
```
教科書に`maybe`モナドを利用しなかった場合の実装が載っているが、大幅に可読性が上がっていることが解る。
### パターンマッチと失敗
`do`記法ではパターンマッチも使うことが出来る。パターンマッチに失敗したときはモナド型クラス内の`fail`関数が呼び出される。標準の実装ではプログラムは異常終了する。`Maybe`モナドのように独自の失敗表現の文脈を持つモナドでは独自に`fail`関数を実装している。
```haskell
fail _ = Nothing
```
パターンマッチに失敗する`do`構文を書き、呼び出してみるとエラーメッセージではなく`Nothing`が表示される。  
パターンマッチが失敗しても全プログラムが巻き添えになることはなく、モナドの文脈で失敗を扱うことができるのだ。
## 13.6 リストモナド/`do`記法とリスト内包表記
リストもモナド。リストのMonadインスタンスは以下のように書くことができる。
```haskell
instance Monad [] where
	return x = [x]
	xs >>= f = concat (map f xs)
	fail _ = []
```
これによってリストを用いた計算の非決定性を保つことが出来る。
```
ghci> [3,4,5] >>= \x -> [x,-x]
[3,-3,4,-4,5,-5]

ghci> [1,2,3] >>= \x -> []
[]

ghci> [1,2] >>= \n -> ['a','b'] >>= \ch -> return (n, ch)
[(1,'a'),(1,'b'),(2,'a'),(2,'b')]
```
一番下のコードはこのように書き直すこともできる。
```haskell
hoge :: [(Int,Char)]
hoge = do
	n <- [1,2]
	ch <- ['a','b']
	return (n. ch)
```
またこれはghci上での以下のコードと同じである。リスト内包表記はリストモナドの構文糖衣であり、内部的には`>>=`を使った非決定性計算に変換されている。
```haskell
ghci> [(n,ch)|n <- [1,2], ch <- ['a','b']]
[(1,'a'),(1,'b'),(2,'a'),(2,'b')]
```
### `MonadPlus`(型)と`guard`関数
定義は以下の通り。
```haskell
class Monad m => MonadPlus m where
	mzero :: m a
	mplus :: m a -> m a -> m a
```
```haskell
guard :: (MonadPlus m) => Bool -> m ()
guard True = return ()
guard False = mzero
```
`mzero`は`Monoid`型クラスでいう`mempty`に対応し、`mplus`は`mappend`に対応する概念である。  
例えばリストであれば以下のようにインスタンスに出来る。
```haskell
instance MonadPlus [] where
	mzero = []
	mplus = (++)
```
`guard`関数は真理値を引数に取り、引数が`True`なら`guard`は()を成功を表す最小限の文脈に入れる。引数が`False`なら、`guard`は失敗したモナド値を作る。
```haskell
ghci> guard (5 > 2) :: Maybe ()
Just ()
ghci> guard (1 > 2) :: Maybe ()
Nothing
ghci> guard (5 > 2) :: [()]
[()]
ghci> guard (5 > 2) :: [()]
[]
```
これを用いれば以下の二つのコードは同じ実装であるとわかる。
```haskell
ghci> [ x | x<- [1..50], '7' `elem` show x ]
[7,17,27,37,47]
ghci> [1..50] >>= (\x -> guard ('7' `elem` show x) >> return x)
[7,17,27,37,47]
```
### 騎士の旅
教科書参照。非決定計算を用いたKnight's Tour問題の解法。
## 13.7 モナド則
ある型が`Monad`のインスタンスになっているからといって、それがモナドであるというわけではない点はファンクターやアプリカブファンクターと一緒。実装の際にその型がモナド則を満たすことを自分で確認しなければいけない。
* `return x >>= f`と`f x`は等価。(左恒等性)
* `m >>= return`は`m`と等価(右恒等性)
* `(m >>= f) >>= g`と`m >>= (\x -> f x >>= g)`は等価(結合法則)
